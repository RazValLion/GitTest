контроль версий
нужен для сохранения истории с возмжностью откатиться назад

Команды
	git --version
	git init - инициалиазация
    git add . - добавляем файлы
    git commit -m "first commit" отправляем коммит с дескриптором изменения
        альтернатива в vs code в левой меню выбираем source controle 
            нажимаем галочку (commit) вводим комментарий.
            для отправки на сервер выбираем more action > push
    git config --list - вывод конфигурации git
    git clone 
    git push - залить всё на сервер
    git status - посмотреть статус                
    git pull - подгружает все изменения с облака
    git checkout -- .\Index.html
        последние изменения удаляются
            alias 
                git co -- .\Index.html
    git reset - отменяет ctr + s  
    git log
        alias
            git l
    git reset --hard HEAD^1 - отмена последнего коммита с удалением в редакторе 
    git reset --soft HEAD^1 - отмена последнего коммита без удаления в редакторе 
    git branch - показывает все ветки со * означает текущая, опция -v показывает ещё и последни commit
        alias
            git br
    git branch develop - создаём новую ветку с названием develop
    git branch - d new_branch - удаляем ветку с названием new_branch
    git checkout develop -  переключаемся на новую ветку на прмер develop
    git checkout -b help - создаёт новую ветку help и сразу переключает нас в неё
    git branch -m myfix - переименование текущей ветки
    git checkout 8875798 - переходим на коммит 8875798
    
Ход курса
	
	Создаём локальное хранилище 
        Сздаём папку и открываем в VS Code
        создаем фал HTML заполняем его ! - стандартной разметкой
            <!DOCTYPE html>
            <html lang="en" lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title> Работа с GIT </title>
            </head>
            <body>
                <p>Git + GitHub </p>
            </body>
            </html>
        создаем папку CSS + фал main.css 
            body {
            background-color: aqua;
            }
        подключаем main.css в index.html
            <link rel="stylesheet" href="CSS/main.css">
        
        в vs Code переходим в git создаём терминал (создаётся прямо в нужной дериктории) 
        или открываем в командной строке необходимую папку 
        и инициализируем репозиторий initialize Repozitory
            появляется скрытая папка git.
        
        инициализация через командную строку
            в консоле выходим на папку проекта
            git init - инициализация 
                example
                    PS D:\Val\WEB\GitHUB\GitTest> git init
                    Initialized empty Git repository in D:/Val/WEB/GitHUB/GitTest/.git/
    #3
        На сайте нажимаем добавить репозиторий и заполняем предложенную форму 
            privet - только платно
        
        вводим следующие команды 
            git config --global user.email "nigtnel@mail.ru"
            git config --global user.name "RazValLion"
                проверяем командой  
                git config --list
                результат проверки должны появиться 
                    user.email=nigtnel@mail.ru
                    user.name=RazValLion
            git init
            git add "index.html"
            git add . - добавляем все файлы 
            git add "имя файла" - добавляем конкретный фаайл
            git commit -m "first commit" 
                результат
                    [master (root-commit) 3638e6a] first commit
                    3 files changed, 80 insertions(+)
                    create mode 100644 CSS/main.css
                    create mode 100644 Index.html
                    create mode 100644 "\320\243\321\200\320\272\320\270 \320\277\320\276 GIT.txt"
            
            git remote add origin https://github.com/RazValLion/GitTest.git
                ссылку можно с командой скопировать с сайта
            git branch -M main
            git push -u origin main
            git status
                если маркикруеться красным значит не добавлены
                если зелёным значит уже добавлены и готовы к отправке
        
        Маркировки состояний файлов
            m на против файла означает модифицирован

        для того чтобы дать другому разработчику доступ до редактирования репозитория необходимо нажать commit в самом репозитории
        SETTINGS > mangage access > invate a collaborator
            ищем пользователя и даём ее пользователю, пользователь проходит по ней и получает доступ к правке кода.
    
    #4 Загрузка стороннего репозитория для использования в работе
        
        Свои репозиториии можно скачать если зарегестрировать в VS Code github нажать на clone Repository
        
        Используем команду git clone 
            Находим нужный репозиторий берём от туда ссылку
            в командной строке выбираем где будет развёрнут клонированный репозиторий
            и применяем git clone и вставляем ссылку репозитория

        плагин Git History  Diff
            для наглядности добавим изменения в файле main.css
                p {
                color: rgba(121, 12, 21, 0.878);
                }
                h2 {
                font-size: 50px;
                }
            и в index.html
                    <h2>Hello</h2>
                        <p>
                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Ab quidem,
                        molestias ducimus, sapiente expedita iure suscipit natus tenetur ipsa
                        similique debitis eveniet aspernatur perspiciatis est fuga voluptatum
                        laboriosam odio eos.
                        </p>
        git status - посмотреть статус                
        git push - залить всё на сервер

        В правом верхнем углу vs code появилась кнопка view History где можно посмотреть всю историю изменений.
    #5
        Рабочий день начинается с команды 
            git pull
                команда подгружает все изменения с облака актуализирует историю  
    6#  alias
        находим файл .gitconfig в C:\Users\Nigtn
        открываем файл на редактирование и добавляем сокращённые команды:
            s = status --short
            st = status
            l = log --oneline --graph --decorate --all
            g = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
            br = branch
            co = checkout
    7#  отмена всех изменений
        можно стрелкой в vs code
        или в консоле черз команду 
        git checkout -- .\Index.html
            последние изменения удаляются
            alias 
                git co -- .\Index.html
            если надо в нескольких файлах отменить то просто пользуемся точкой 
                git co .
        если изменения уже в stage (статус маркирует зелёным) то отменяем командой
            git reset .\Index.html
                проверяем 
                    git s
                        статус меняется с зелёного на красный
            далее пользуемся командой 
            git co -- .\Index.html
                все изменения исчезают
        
        если именения уже прошли commit
            к примеру добавим в index.html:
                <P>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Laboriosam, quam neque. Nam, nisi sed tenetur culpa quo nostrum dolorem omnis distinctio porro, eveniet placeat inventore? Tempore magnam delectus dolorum sed.</P>
                <h4>Title</h4>
            смотрим статус
                git s
                    получаем 
                    M Index.html (м - красный (модфицированный))
            добавляем его
                git add .
                    получаем 
                    M Index.html (м - зелёный (добавленный))
            делаем commit -m 
                git commit -m "Новый абзац и заголовок"
            проверяем 
                git l
                    видим
                        PS D:\Val\WEB\GitHUB\GitTest> git l  
                        * fc0cc9f (HEAD -> main) Новый абзац и заголовок
                            остальное удалил
            Удаляем не нужный результат commit 
                git reset --hard HEAD^1
                    тоесть вернутся на один commit назад с помощью жёсткого reset
            Если мы хотим убрать из commit но не удалять у себя то используем вместо --hard --soft
                git reset --soft HEAD^1
            если всёже надо отменить и в своём файле то пишем 
                git reset .
                git co -- .
    8#  Ветвление
        git branch - показывает все ветки со * означает текущая, опция -v показывает ещё и последни commit
        alias
            git br
        git branch develop - создаём новую ветку с названием develop
        проверяем git br - долна появится новая ветка
        переключаемся на новую ветку
            git co develop    
        добавим изменения для примера в main.css 
            <h4>title</h4>
            <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. In, placeat?</p>
            сохраним изменения 
                git add .
                git commit -m "Новая ветка"
                проверяем
                    git log
                        ebaf5a4 (HEAD -> develop) овая ветка
                            HEAD -> - показывает в какой ветке мы сейчас находимся
        git checkout -b about - создаёт новую ветку about и сразу переключает нас в неё
        переименование текущей ветки
            git branch -m myfix 
        откат на любой commit
            git checkout 8875798 
                где 8875798 код коммита
            в этом коммите так же можно создать ветку в ней будут изменения только до того коммита в который мы откатились
        если сделана новая ветка то её надо добавлять так  
            git push --set-upstream origin new_branch
        удаление ветки
            git br -d new_branch
    9#  создание GISTов - фрагмент кода который можно применить в следующих проектах
        можно создвать на самом сайте GitHub
            в правом верхнем углу страницы развернуть + 
        можно создавать через редактор, что более удобно
            устанавливаем расширение Gist Extention
            